from fastapi import APIRouter, Request, Depends
from pymongo.database import Database
from app.db.mongo_client import get_mongo_db
from app.services.view_data_service import ViewDataService
from app.utils.logger import setup_logger

router = APIRouter()
logger = setup_logger(__name__)

@router.post("/view-data")
async def view_data(request: Request, db: Database = Depends(get_mongo_db)):
    """
    POST endpoint to return obligor names, sub_product_type, and doc_run_id for a given
    tenant, engagement, year, and quarter â€” if documents are uploaded and vector indexing is completed.
    
    Expects JSON:
    {
        "tenant_id": "abc",
        "engagement_id": "xyz",
        "year": 2025,
        "quarter": "Q2"
    }
    
    Returns data only if a valid request log exists with completed vector indexing.
    """
    try:
        payload = await request.json()
        tenant_id = payload.get("tenant_id")
        engagement_id = payload.get("engagement_id")
        year = payload.get("year")
        quarter = payload.get("quarter")

        if not all([tenant_id, engagement_id, year, quarter]):
            logger.warning("[VIEW-DATA] Missing required fields in request body")
            return {"status": "error", "message": "Missing tenant_id, engagement_id, year, or quarter"}

        service = ViewDataService(db)
        result = service.get_view_data(tenant_id, engagement_id, year, quarter)
        return result

    except Exception as e:
        logger.exception(f"[VIEW-DATA API ERROR] Failed to handle view-data request: {str(e)}")
        return {"status": "error", "message": "Unexpected server error", "details": str(e)}
