from app.model.document_schema import DocumentModel, SharePointInfoModel, StepModel
from app.model.enums import StepName, StepStatus, StepResult
from datetime import datetime
import uuid
import mimetypes

class SharePointIngestionService:

    def _process_tape_file(self, sp_client, year: str, quarter: str, request_id: str,
                           run_id: str, tenant_id: str, engagement_id: str,
                           use_case_name: str, is_open_source_pipeline: bool) -> dict:
        """
        Checks and processes a tape file from the <year>/<quarter> folder.
        Returns a document dict if found, else None.
        """
        try:
            base_path = f"{year}/{quarter}"
            folder = sp_client.get_folder(base_path)
            sp_client.ctx.load(folder.files)
            sp_client.ctx.execute_query()

            for file in folder.files:
                file_name = file.properties.get("Name", "").lower()
                if file_name.startswith("tape") and file_name.endswith(".xlsx"):
                    content_base64 = sp_client.get_base64_content(file)
                    file_type = mimetypes.guess_type(file_name)[0] or "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

                    doc = DocumentModel(
                        request_id=request_id,
                        doc_run_id=f"tape_{year}_{quarter}",
                        run_id=run_id,
                        tenant_id=tenant_id,
                        engagement_id=engagement_id,
                        year=int(year),
                        quarter=quarter,
                        sub_product_type="ALL",
                        obligor_name="ALL",
                        doc_id=str(uuid.uuid4()),
                        original_filename=file.properties.get("Name", "tape.xlsx"),
                        base64=content_base64,
                        file_type="xlsx",
                        is_tape_file=True,
                        sharepoint_info=SharePointInfoModel(
                            relative_path=file.properties.get("ServerRelativeUrl", ""),
                            library_name="Documents",
                            site_url=sp_client.site_url
                        ),
                        steps=[
                            StepModel(
                                step_name=StepName.SHAREPOINT_INGESTION,
                                result=StepResult.SUCCESS,
                                status=StepStatus.COMPLETED,
                                timestamp=datetime.utcnow().isoformat()
                            )
                        ]
                    )
                    return doc.dict()
        except Exception as e:
            print(f"[WARN] Failed to process tape file for {year}-{quarter}: {str(e)}")
        return None
