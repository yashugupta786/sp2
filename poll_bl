from pymongo.collection import Collection
from typing import Dict, Any, List
from app.utils.logger import setup_logger

logger = setup_logger(__name__)


class PollStatusService:
    """
    Service to poll the processing status of all steps for a given request_id from run_request_logs.
    """

    def __init__(self, run_logs_col: Collection):
        self.run_logs_col = run_logs_col

    def get_step_status(self, request_id: str) -> Dict[str, Any]:
        """
        Retrieves step-by-step processing status for a specific request_id.

        Args:
            request_id (str): The unique request ID.

        Returns:
            Dict[str, Any]: Status summary including step_name, status, timestamp, result, and message.
        """
        try:
            log_doc = self.run_logs_col.find_one({"request_id": request_id})
            if not log_doc:
                logger.warning(f"[POLLING] No record found for request_id: {request_id}")
                return {
                    "status": "not_found",
                    "request_id": request_id,
                    "steps": [],
                    "message": f"No record found for request_id: {request_id}"
                }

            steps = log_doc.get("steps", [])
            formatted_steps: List[Dict[str, Any]] = []

            if not steps or not isinstance(steps, list):
                logger.warning(f"[POLLING] No steps found or invalid format for request_id: {request_id}")
                return {
                    "status": "empty",
                    "request_id": request_id,
                    "steps": [],
                    "message": "No steps found or invalid format"
                }

            for step in steps:
                formatted_steps.append({
                    "step_name": step.get("step_name"),
                    "status": step.get("status"),
                    "result": step.get("result"),
                    "timestamp": step.get("timestamp"),
                    "message": step.get("message", "")  # Optional message field
                })

            logger.info(f"[POLLING] Successfully fetched status for request_id: {request_id}")
            return {
                "status": "success",
                "request_id": request_id,
                "steps": formatted_steps
            }

        except Exception as e:
            logger.exception(f"[POLLING ERROR] Failed to retrieve status for request_id: {request_id} | Error: {str(e)}")
            return {
                "status": "error",
                "message": str(e),
                "request_id": request_id
            }
