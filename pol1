from pymongo.database import Database
from typing import Dict, Any
from app.utils.logger import setup_logger
from app.model.enums import StepStatus

logger = setup_logger(__name__)

class PollingStatusService:
    """
    Service to fetch the status of each step in the pipeline based on a request_id
    from the run_request_logs collection.
    """

    def __init__(self, db: Database):
        self.run_logs = db["run_request_logs"]

    def get_status_by_request_id(self, request_id: str) -> Dict[str, Any]:
        """
        Fetch step-wise status from run_request_logs collection using request_id.

        Args:
            request_id (str): Unique identifier for the run.

        Returns:
            Dict[str, Any]: Status of each pipeline step.
        """
        try:
            if not request_id:
                logger.warning("[POLL-STATUS] Missing request_id in input.")
                return {
                    "status": "error",
                    "message": "Missing request_id",
                    "steps": [],
                    "request_id": request_id
                }

            log_entry = self.run_logs.find_one({"request_id": request_id})

            if not log_entry:
                logger.info(f"[POLL-STATUS] No log found for request_id={request_id}")
                return {
                    "status": "not_found",
                    "message": "No request found with the provided request_id",
                    "steps": [],
                    "request_id": request_id
                }

            steps = log_entry.get("steps", [])
            completed_steps = []
            pending_steps = []

            for step in steps:
                name = step.get("step_name")
                status = step.get("status")
                if status == StepStatus.COMPLETED:
                    completed_steps.append(name)
                else:
                    pending_steps.append(name)

            return {
                "status": "success",
                "request_id": request_id,
                "completed_steps": completed_steps,
                "pending_steps": pending_steps,
                "all_steps": steps
            }

        except Exception as e:
            logger.exception(f"[POLL-STATUS ERROR] Failed to retrieve status for request_id={request_id}: {str(e)}")
            return {
                "status": "error",
                "message": str(e),
                "request_id": request_id,
                "steps": []
            }
